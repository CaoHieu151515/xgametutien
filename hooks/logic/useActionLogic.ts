import { useState, useCallback } from 'react';
import { StoryPart, StoryResponse, CharacterProfile, WorldSettings, NPC, Choice, AppSettings, GameSnapshot, Item, StoryApiResponse, ToastMessage, StatusEffect } from '../../types';
import { log, startTimer, endTimer } from '../../services/logService';
import { applyStoryResponseToState } from '../../aiPipeline/applyDiff';
import { verifyStoryResponse } from '../../aiPipeline/validate';
import { findBestAvatar } from '../../services/avatarService';
import { GAME_CONFIG } from '../../config/gameConfig';
import * as saveService from '../../services/saveService';
import { calculateBaseStatsForLevel } from '../../services/progressionService';

const processTurnBasedEffects = (
    profile: CharacterProfile,
    npcs: NPC[],
): {
    updatedProfile: CharacterProfile,
    updatedNpcs: NPC[],
    notifications: string[],
    systemEventPrompt: string | null
} => {
    const notifications: string[] = [];
    let systemEventPrompt: string | null = null;
    let updatedProfile = { ...profile, statusEffects: [...profile.statusEffects] };
    let updatedNpcs = npcs.map(npc => ({ ...npc, statusEffects: [...npc.statusEffects] }));

    const processEntity = <T extends CharacterProfile | NPC>(entity: T, isPlayer: boolean): T => {
        if (!entity.statusEffects || entity.statusEffects.length === 0) return entity;
        
        const entityName = isPlayer ? 'B·∫°n' : `<b>${entity.name}</b>`;
        const maxStats = isPlayer ? { maxHealth: (entity as CharacterProfile).maxHealth, maxMana: (entity as CharacterProfile).maxMana } : calculateBaseStatsForLevel(entity.level);

        const nextEffects: StatusEffect[] = [];

        for (const effect of entity.statusEffects) {
            let effectExpired = false;

            // 1. Duration Countdown
            const durationMatch = effect.duration.match(/(\d+)\s*l∆∞·ª£t/i);
            let nextDuration = effect.duration;

            if (durationMatch) {
                const turnsLeft = parseInt(durationMatch[1], 10) - 1;
                if (turnsLeft <= 0) {
                    effectExpired = true;
                    notifications.push(`üçÉ Tr·∫°ng th√°i "<b>${effect.name}</b>" c·ªßa ${entityName} ƒë√£ k·∫øt th√∫c.`);
                } else {
                    nextDuration = `${turnsLeft} l∆∞·ª£t`;
                }
            }

            // 2. Tick Effects
            if (effect.tickEffect && !effectExpired) {
                 if (effect.tickEffect.healthChange) {
                    let actualHealthChange = 0;
                    const change = effect.tickEffect.healthChange;
                    if (typeof change === 'string' && change.endsWith('%')) {
                        actualHealthChange = Math.round(maxStats.maxHealth * (parseFloat(change) / 100));
                    } else if (typeof change === 'number') {
                        actualHealthChange = change;
                    }

                    if (actualHealthChange !== 0) {
                        entity.health = Math.max(0, Math.min(maxStats.maxHealth, entity.health + actualHealthChange));
                        if(actualHealthChange < 0) {
                           notifications.push(`ü©∏ ${entityName} m·∫•t <b>${Math.abs(actualHealthChange)} Sinh L·ª±c</b> v√¨ <i>${effect.name}</i>.`);
                        } else {
                           notifications.push(`üíö ${entityName} h·ªìi ph·ª•c <b>${actualHealthChange} Sinh L·ª±c</b> nh·ªù <i>${effect.name}</i>.`);
                        }
                    }
                }
                 if (effect.tickEffect.manaChange) {
                    let actualManaChange = 0;
                    const change = effect.tickEffect.manaChange;
                    if (typeof change === 'string' && change.endsWith('%')) {
                        actualManaChange = Math.round(maxStats.maxMana * (parseFloat(change) / 100));
                    } else if (typeof change === 'number') {
                        actualManaChange = change;
                    }
                     if (actualManaChange !== 0) {
                        entity.mana = Math.max(0, Math.min(maxStats.maxMana, entity.mana + actualManaChange));
                        if(actualManaChange < 0) {
                           notifications.push(`üíß ${entityName} m·∫•t <b>${Math.abs(actualManaChange)} Linh L·ª±c</b> v√¨ <i>${effect.name}</i>.`);
                        } else {
                           notifications.push(`üíß ${entityName} h·ªìi ph·ª•c <b>${actualManaChange} Linh L·ª±c</b> nh·ªù <i>${effect.name}</i>.`);
                        }
                    }
                }
            }

            // 3. Special Expiry Logic (e.g., Birth)
            if (effectExpired && effect.isPregnancyEffect && !systemEventPrompt) {
                 systemEventPrompt = `(H·ªá th·ªëng) ${entity.name} b·∫Øt ƒë·∫ßu chuy·ªÉn d·∫°. Th·ªùi kh·∫Øc sinh n·ªü ƒë√£ ƒë·∫øn. H√£y m√¥ t·∫£ s·ª± ki·ªán n√†y m·ªôt c√°ch chi ti·∫øt v√† k·∫øt qu·∫£.`;
            }

            if (!effectExpired) {
                nextEffects.push({ ...effect, duration: nextDuration });
            }
        }

        return { ...entity, statusEffects: nextEffects };
    };

    updatedProfile = processEntity(updatedProfile, true);
    updatedNpcs = updatedNpcs.map(npc => npc.isDead ? npc : processEntity(npc, false));

    return { updatedProfile, updatedNpcs, notifications, systemEventPrompt };
};

const findInconsistentNewEntities = (response: StoryResponse, profile: CharacterProfile, npcs: NPC[], worldSettings: WorldSettings): string[] => {
    const { story, choices = [], newNPCs = [], newLocations = [], newItems = [], newSkills = [], newWorldKnowledge = [] } = response;
    
    // Scan story and all text fields from choices
    const textToScan = [
        story,
        ...choices.map(c => c.title),
        ...choices.map(c => c.benefit),
        ...choices.map(c => c.risk),
        ...choices.map(c => c.specialNote || ''),
    ].join(' ');

    if (!textToScan.trim()) {
        return [];
    }
    
    const newNounRegex = /\[\[(.*?)\]\]/g;
    const mentionedNewNouns = new Set<string>();
    let match;
    while ((match = newNounRegex.exec(textToScan)) !== null) {
        mentionedNewNouns.add(match[1].trim());
    }
    if (mentionedNewNouns.size === 0) return [];

    const allKnownNames = new Set<string>();
    npcs.forEach(n => { allKnownNames.add(n.name); if(n.aliases) n.aliases.split(',').forEach(a => allKnownNames.add(a.trim())); });
    profile.discoveredLocations.forEach(l => allKnownNames.add(l.name));
    profile.skills.forEach(s => allKnownNames.add(s.name));
    (profile.discoveredItems || []).forEach(i => allKnownNames.add(i.name));
    worldSettings.initialKnowledge.forEach(k => allKnownNames.add(k.title));
    allKnownNames.add(profile.name);
    if (profile.talent.name) allKnownNames.add(profile.talent.name);
    if (profile.specialConstitution.name) allKnownNames.add(profile.specialConstitution.name);
    (profile.achievements || []).forEach(a => allKnownNames.add(a.name));

    const newNamesInResponse = new Set<string>();
    newNPCs.forEach(n => newNamesInResponse.add(n.name));
    newLocations.forEach(l => newNamesInResponse.add(l.name));
    newItems.forEach(i => newNamesInResponse.add(i.name));
    newSkills.forEach(s => newNamesInResponse.add(s.name));
    newWorldKnowledge.forEach(k => newNamesInResponse.add(k.title));

    const ghosts: string[] = [];
    for (const noun of mentionedNewNouns) {
        if (!allKnownNames.has(noun) && !newNamesInResponse.has(noun)) {
            ghosts.push(noun);
        }
    }
    return ghosts;
};


interface UseActionLogicProps {
    characterProfile: CharacterProfile | null;
    worldSettings: WorldSettings | null;
    npcs: NPC[];
    history: StoryPart[];
    choices: Choice[];
    gameLog: GameSnapshot[];
    settings: AppSettings;
    api: any;
    apiKeyForService: string;
    setChoices: React.Dispatch<React.SetStateAction<Choice[]>>;
    setHistory: React.Dispatch<React.SetStateAction<StoryPart[]>>;
    setCharacterProfile: React.Dispatch<React.SetStateAction<CharacterProfile | null>>;
    setNpcs: React.Dispatch<React.SetStateAction<NPC[]>>;
    setWorldSettings: React.Dispatch<React.SetStateAction<WorldSettings | null>>;
    setGameLog: React.Dispatch<React.SetStateAction<GameSnapshot[]>>;
    setToast: React.Dispatch<React.SetStateAction<ToastMessage | null>>;
    setIsLoading: (loading: boolean) => void;
    setError: (error: string | null) => void;
    setLastFailedCustomAction: React.Dispatch<React.SetStateAction<string | null>>;
}

export const useActionLogic = (props: UseActionLogicProps) => {
    const {
        characterProfile, worldSettings, npcs, history, choices, gameLog, settings, api, apiKeyForService,
        setChoices, setHistory, setCharacterProfile, setNpcs, setWorldSettings, setGameLog, setToast,
        setIsLoading, setError, setLastFailedCustomAction
    } = props;

    const handleAction = useCallback(async (choice: Choice) => {
        if (!characterProfile || !worldSettings) return;
        
        const actionLogicSource = 'useActionLogic.ts';
        startTimer('total_action_logic', actionLogicSource, 'X·ª≠ l√Ω h√†nh ƒë·ªông c·ªßa ng∆∞·ªùi ch∆°i');

        // --- STEP 1: Process turn-based effects BEFORE doing anything else ---
        startTimer('process_turn_effects', actionLogicSource, 'X·ª≠ l√Ω hi·ªáu ·ª©ng theo l∆∞·ª£t');
        const { updatedProfile, updatedNpcs, notifications: preTurnNotifications, systemEventPrompt } = processTurnBasedEffects(characterProfile, npcs);
        endTimer('process_turn_effects', actionLogicSource);
        
        const currentProfile = updatedProfile;
        const currentNpcs = updatedNpcs;

        try {
            startTimer('autosave', actionLogicSource, 'T·ª± ƒë·ªông l∆∞u ƒë·∫ßu l∆∞·ª£t');
            await saveService.saveGame(currentProfile, worldSettings, currentNpcs, history, choices, gameLog);
            endTimer('autosave', actionLogicSource);
        } catch(e) {
            endTimer('autosave', actionLogicSource, 'Th·∫•t b·∫°i');
            log('useActionLogic.ts', `Autosave failed: ${(e as Error).message}`, 'ERROR');
            setToast({ message: `L·ªói t·ª± ƒë·ªông l∆∞u game: ${(e as Error).message}`, type: 'error' });
        }

        log('useActionLogic.ts', `Player action: "${choice.title}"`, 'FUNCTION');

        setIsLoading(true);
        setError(null);
        setToast(null);
        setLastFailedCustomAction(null);
        
        const isSuccess = Math.random() * 100 < choice.successChance;
        const successText = isSuccess ? '(Th√†nh c√¥ng)' : '(Th·∫•t b·∫°i)';
        let actionPromptText = systemEventPrompt || `${successText} Ng∆∞·ªùi ch∆°i ƒë√£ ch·ªçn h√†nh ƒë·ªông: "${choice.title}" (Th·ªùi gian th·ª±c hi·ªán ∆∞·ªõc t√≠nh: ${choice.durationInMinutes} ph√∫t). Ghi ch√∫ ƒë·∫∑c bi·ªát c·ªßa h√†nh ƒë·ªông n√†y l√†: "${choice.specialNote || 'Kh√¥ng c√≥'}".`;
        if (systemEventPrompt) {
            log('useActionLogic.ts', `System event triggered, overriding player action: "${systemEventPrompt}"`, 'INFO');
            setToast({ message: 'M·ªôt s·ª± ki·ªán quan tr·ªçng ƒë√£ x·∫£y ra!', type: 'info' });
        }

        const { randomEncounterChance, sfwEventWeights, nsfwEventWeights } = GAME_CONFIG.events;
        if (!choice.isTimeSkip && choice.durationInMinutes > 0 && Math.random() < randomEncounterChance) {
            const weights = settings.isMature ? nsfwEventWeights : sfwEventWeights;
            const totalWeight = Object.values(weights).reduce((sum, weight) => sum + weight, 0);
            let random = Math.random() * totalWeight;
            for (const [type, weight] of Object.entries(weights)) {
                if (random < weight) {
                    const eventType = type.replace(/_/g, ' ');
                    actionPromptText = `(H·ªá th·ªëng) Trong l√∫c nh√¢n v·∫≠t ƒëang h√†nh ƒë·ªông, m·ªôt s·ª± ki·ªán ng·∫´u nhi√™n thu·ªôc lo·∫°i '${eventType}' ƒë√£ x·∫£y ra. H√£y m√¥ t·∫£ chi ti·∫øt s·ª± ki·ªán n√†y v√† k·∫øt h·ª£p n√≥ m·ªôt c√°ch li·ªÅn m·∫°ch v·ªõi h√†nh ƒë·ªông g·ªëc c·ªßa ng∆∞·ªùi ch∆°i.\n\nH√†nh ƒë·ªông v√† k·∫øt qu·∫£ g·ªëc:\n${actionPromptText}`;
                    log('useActionLogic.ts', `Triggered random event of type: ${type}`, 'INFO');
                    setToast({ message: 'M·ªôt s·ª± ki·ªán b·∫•t ng·ªù ƒë√£ x·∫£y ra!', type: 'info' });
                    break;
                }
                random -= weight;
            }
        }

        const preActionState = { characterProfile: currentProfile, worldSettings, npcs: currentNpcs, history, choices };
        const newActionPart: StoryPart = { id: Date.now(), type: 'action', text: choice.title };

        setChoices([]);
        
        let historyText = 'Ch∆∞a c√≥ l·ªãch s·ª≠.';
        const historySize = settings.historyContextSize;
        if (historySize > 0 && gameLog.length > 0) {
            const relevantSnapshots = gameLog.slice(-historySize);
            const numFullTurns = 5; // The number of most recent turns to show in full detail.

            historyText = relevantSnapshots.map((snapshot, index) => {
                const isFullTurn = index >= relevantSnapshots.length - numFullTurns;

                const action = snapshot.turnContent.playerAction
                    ? `> H√†nh ƒë·ªông: ${snapshot.turnContent.playerAction.text}`
                    : '> B·∫Øt ƒë·∫ßu c√¢u chuy·ªán.';
                
                let result;
                if (isFullTurn) {
                    // Full content for recent turns
                    result = `>> K·∫øt qu·∫£: ${snapshot.turnContent.storyResult.text}`;
                } else {
                    // Summarized/filtered content for older turns
                    const notifications = snapshot.turnContent.storyResult.notifications;
                    if (notifications && notifications.length > 0) {
                        // Strip HTML tags for the prompt
                        const cleanNotifications = notifications.map(n => n.replace(/<[^>]*>?/gm, ''));
                        result = `>> Di·ªÖn bi·∫øn ch√≠nh:\n- ${cleanNotifications.join('\n- ')}`;
                    } else {
                        // If no notifications, provide a very short summary of the text
                        const storyText = snapshot.turnContent.storyResult.text;
                        const firstSentence = storyText.split(/[.!?]/)[0];
                        result = `>> Di·ªÖn bi·∫øn ch√≠nh: ${firstSentence}.`;
                    }
                }

                return `L∆∞·ª£t ${snapshot.turnNumber}\n${action}\n${result}`;
            }).join('\n\n');
        }
            
        const MAX_RETRIES = GAME_CONFIG.ai.maxRetries;
        let storyResponse: StoryResponse | null = null;
        let usageMetadata: StoryApiResponse['usageMetadata'] | undefined;
        let lastErrorReason = '';

        for (let attempt = 1; attempt <= MAX_RETRIES + 1; attempt++) {
            try {
                let currentActionText = actionPromptText;
                if(choice.isTimeSkip && choice.turnsToSkip) {
                    currentActionText = `(H·ªá th·ªëng) Ng∆∞·ªùi ch∆°i quy·∫øt ƒë·ªãnh b·ªè qua th·ªùi gian. H√£y tua nhanh ${choice.turnsToSkip} l∆∞·ª£t v√† t√≥m t·∫Øt nh·ªØng s·ª± ki·ªán ch√≠nh ƒë√£ x·∫£y ra.`
                } else if (attempt > 1 && lastErrorReason) {
                    currentActionText = `**System Correction (Attempt ${attempt}):** Your previous response was invalid due to: "${lastErrorReason}". YOU MUST FIX THIS. If you mention a new entity using [[...]] syntax in the story or choices, you MUST define it in the appropriate array (newNPCs, newLocations, newItems, newSkills, or newWorldKnowledge). Do not update NPCs that are not in the provided context.\n\n**Original Action & Result:**\n${actionPromptText}`;
                }
                
                startTimer('ai_call', actionLogicSource, `G·ªçi API AI (l·∫ßn th·ª≠ ${attempt})`);
                const apiResponse = await api.getNextStoryStep(historyText, currentActionText, settings, currentProfile, worldSettings, currentNpcs, apiKeyForService);
                endTimer('ai_call', actionLogicSource);
                
                log('useActionLogic.ts', `[Attempt ${attempt}] Received story response from API.`, 'API');

                storyResponse = apiResponse.storyResponse;
                usageMetadata = apiResponse.usageMetadata;
                
                // FIX+: Trim recap/duplicate content from AI response
                if (storyResponse?.story) {
                    let cleaned = storyResponse.story.trim();
                    const recapOpeners = [/^t√≥m\st·∫Øt/i, /^tr∆∞·ªõc\sƒë√≥/i, /^nh∆∞\sƒë√£/i, /^·ªü\sl∆∞·ª£t\str∆∞·ªõc/i, /^sau\snh·ªØng\sg√¨/i, /^t·ª´\snh·ªØng\sdi·ªÖn\sbi·∫øn\s*tr∆∞·ªõc/i];
                    const lines = cleaned.split(/\n+/);
                    while (lines.length > 0 && recapOpeners.some(rx => rx.test(lines[0].trim()))) {
                        lines.shift();
                    }
                    cleaned = lines.join('\n').trim();
                    cleaned = cleaned.replace(/(^|\n)---\sL∆∞·ª£t\s\d+\s*---[\s\S]?(?=\n---\sL∆∞·ª£t\s*\d+\s*---|\n*$)/g, '').trim();
                    storyResponse.story = cleaned;
                }

                // Structural and logical verification
                verifyStoryResponse(storyResponse, currentProfile, currentNpcs, worldSettings);

                // Self-correction verification for ghost entities
                const ghostEntityNames = findInconsistentNewEntities(storyResponse, currentProfile, currentNpcs, worldSettings);
                if (ghostEntityNames.length > 0) {
                    throw new Error(`AI mentioned new entities [[...]] but did not define them: ${ghostEntityNames.join(', ')}.`);
                }
                
                log('useActionLogic.ts', `[Attempt ${attempt}] AI response passed all verifications.`, 'INFO');
                break; // Success

            } catch (e) {
                lastErrorReason = (e as Error).message;
                endTimer('ai_call', actionLogicSource, 'Th·∫•t b·∫°i');
                log('useActionLogic.ts', `[Attempt ${attempt}] Failed. Reason: ${lastErrorReason}. Retrying...`, 'ERROR');
                if (attempt > MAX_RETRIES) {
                    const errorMessage = `L·ªói khi x·ª≠ l√Ω b∆∞·ªõc ti·∫øp theo sau ${attempt} l·∫ßn th·ª≠: ${lastErrorReason}`;
                    log('useActionLogic.ts', errorMessage, 'ERROR');
                    setToast({ message: `L·ªói khi t·∫°o b∆∞·ªõc ti·∫øp theo c·ªßa c√¢u chuy·ªán: ${lastErrorReason}`, type: 'error' });
                    setChoices(preActionState.choices);
                    if (choice.isCustom) setLastFailedCustomAction(choice.title);
                    setIsLoading(false);
                    return;
                }
            }
        }
        
        if (!storyResponse) {
             const finalError = "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi h·ª£p l·ªá t·ª´ AI sau nhi·ªÅu l·∫ßn th·ª≠.";
             log('useActionLogic.ts', finalError, 'ERROR');
             setToast({ message: finalError, type: 'error' });
             setChoices(preActionState.choices);
             setIsLoading(false);
             return;
        }

        if (storyResponse.newNPCs?.length) {
            const allNpcsForContext = [...currentNpcs, ...storyResponse.newNPCs];
            const avatarUpdatePromises = storyResponse.newNPCs.map(async (newNpc) => {
                if (!newNpc.avatarUrl) {
                    const allOtherNpcs = allNpcsForContext.filter(n => n.id !== newNpc.id);
                    const avatarUrl = await findBestAvatar(newNpc, allOtherNpcs);
                    if (avatarUrl) return { ...newNpc, avatarUrl };
                }
                return newNpc;
            });
            storyResponse.newNPCs = await Promise.all(avatarUpdatePromises);
        }

        if (usageMetadata?.totalTokenCount) {
            setToast({ message: `ƒê√£ s·ª≠ d·ª•ng ${usageMetadata.totalTokenCount.toLocaleString()} tokens.`, type: 'info' });
        }

        const newTurnNumber = (gameLog[gameLog.length - 1]?.turnNumber || 0) + 1;
        
        try {
            startTimer('apply_state', actionLogicSource, '√Åp d·ª•ng c√°c thay ƒë·ªïi tr·∫°ng th√°i');
            let { nextProfile, nextNpcs, finalWorldSettings, notifications } = await applyStoryResponseToState({
                storyResponse, characterProfile: currentProfile, npcs: currentNpcs, worldSettings, settings, choice, turnNumber: newTurnNumber, isSuccess,
                api, apiKey: apiKeyForService, preTurnNotifications,
            });
            endTimer('apply_state', actionLogicSource);

            if (!choice.isTimeSkip && !systemEventPrompt) {
                // Duration countdowns were already handled at the start. No need to do it again.
            }

            const newStoryPart: StoryPart = { id: Date.now() + 1, type: 'story', text: storyResponse.story, notifications };
            const newSnapshot: GameSnapshot = { turnNumber: newTurnNumber, preActionState, turnContent: { playerAction: newActionPart, storyResult: newStoryPart } };
            
            const finalHistory = [...history, newActionPart, newStoryPart];
            const finalChoices = storyResponse.choices;
            
            let logWithNewTurn = [...gameLog, newSnapshot];
            const maxRewindableTurns = GAME_CONFIG.ui.maxRewindableTurns;
            const finalGameLog = logWithNewTurn.map((snapshot, index, arr) => {
                if (arr.length > maxRewindableTurns && index < arr.length - maxRewindableTurns) {
                    const { preActionState, ...prunedSnapshot } = snapshot;
                    return prunedSnapshot as GameSnapshot;
                }
                return snapshot;
            });

            setGameLog(finalGameLog);
            setHistory(finalHistory);
            setChoices(finalChoices);
            setCharacterProfile(nextProfile);
            setNpcs(nextNpcs);
            setWorldSettings(finalWorldSettings);

        } catch (e: any) {
            const errorMessage = `L·ªói khi √°p d·ª•ng tr·∫°ng th√°i: ${e.message}`;
            endTimer('apply_state', actionLogicSource, 'Th·∫•t b·∫°i');
            log('useActionLogic.ts', errorMessage, 'ERROR');
            setToast({ message: `L·ªói khi x·ª≠ l√Ω c√¢u chuy·ªán: ${e.message}`, type: 'error' });
            setChoices(preActionState.choices);
            if (choice.isCustom) setLastFailedCustomAction(choice.title);
        } finally {
            setIsLoading(false);
            endTimer('total_action_logic', actionLogicSource);
        }
    }, [characterProfile, worldSettings, npcs, history, choices, gameLog, settings, api, apiKeyForService, setChoices, setHistory, setCharacterProfile, setNpcs, setWorldSettings, setGameLog, setToast, setIsLoading, setError, setLastFailedCustomAction]);
    
    const handleUseItem = useCallback((item: Item) => {
        log('useActionLogic.ts', `Player uses item: "${item.name}"`, 'FUNCTION');
        const useChoice: Choice = {
            title: `S·ª≠ d·ª•ng 1 v·∫≠t ph·∫©m "${item.name}" (ID: ${item.id}).`,
            benefit: item.effectsDescription || 'Ch∆∞a r√µ',
            risk: 'C√≥ th·ªÉ c√≥ t√°c d·ª•ng ph·ª•',
            successChance: 95,
            durationInMinutes: 0,
        };
        handleAction(useChoice);
    }, [handleAction]);

    const handleTimeSkip = useCallback((turns: number) => {
        log('useActionLogic.ts', `Player skips time: ${turns} turns`, 'FUNCTION');
        const timeSkipChoice: Choice = {
            title: `(H·ªá th·ªëng) Ng∆∞·ªùi ch∆°i quy·∫øt ƒë·ªãnh b·ªè qua ${turns} l∆∞·ª£t.`,
            benefit: 'Th·ªùi gian tr√¥i qua, c√°c s·ª± ki·ªán d√†i h·∫°n c√≥ th·ªÉ ƒë∆∞·ª£c gi·∫£i quy·∫øt.',
            risk: 'Th·∫ø gi·ªõi v·∫≠n ƒë·ªông kh√¥ng th·ªÉ l∆∞·ªùng tr∆∞·ªõc.',
            successChance: 100,
            durationInMinutes: turns * GAME_CONFIG.gameplay.time.minutesPerTurn,
            isTimeSkip: true,
            turnsToSkip: turns
        };
        handleAction(timeSkipChoice);
    }, [handleAction]);

    return {
        handleAction,
        handleUseItem,
        handleTimeSkip
    };
};